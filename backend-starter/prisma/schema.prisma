// Prisma Schema for GideonsTechnology Business Website
// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  company       String?
  phone         String?
  role          Role     @default(CUSTOMER)
  emailVerified Boolean  @default(false) @map("email_verified")
  avatar        String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  contracts     Contract[]
  notifications Notification[]
  contactForms  ContactForm[]

  @@map("users")
}

model Contract {
  id              Int            @id @default(autoincrement())
  userId          Int            @map("user_id")
  title           String
  description     String?
  value           Decimal?       @db.Decimal(10, 2)
  status          ContractStatus @default(DRAFT)
  startDate       DateTime?      @map("start_date")
  endDate         DateTime?      @map("end_date")
  progress        Int            @default(0)
  contractFileUrl String?        @map("contract_file_url")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  payments Payment[]

  @@map("contracts")
}

model Project {
  id          Int           @id @default(autoincrement())
  contractId  Int           @map("contract_id")
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  progress    Int           @default(0)
  dueDate     DateTime?     @map("due_date")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  tasks    Task[]

  @@map("projects")
}

model Task {
  id          Int        @id @default(autoincrement())
  projectId   Int        @map("project_id")
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?  @map("due_date")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NewsletterSubscriber {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String?
  subscribedAt   DateTime  @default(now()) @map("subscribed_at")
  unsubscribedAt DateTime? @map("unsubscribed_at")
  status         SubStatus @default(ACTIVE)

  @@map("newsletter_subscribers")
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  name      String
  email     String
  company   String?
  phone     String?
  subject   String?
  message   String
  status    FormStatus @default(NEW)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("contact_forms")
}

model ServiceRequest {
  id          Int           @id @default(autoincrement())
  name        String
  email       String
  company     String?
  phone       String?
  serviceType ServiceType
  budget      String?
  description String
  status      RequestStatus @default(NEW)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("service_requests")
}

model Payment {
  id            Int           @id @default(autoincrement())
  contractId    Int           @map("contract_id")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  stripeId      String?       @map("stripe_id")
  description   String?
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id])

  @@map("payments")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  action    String
  resource  String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum ContractStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum SubStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum FormStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ServiceType {
  SOFTWARE_DEVELOPMENT
  NETWORK_INFRASTRUCTURE
  CLOUD_SOLUTIONS
  MOBILE_DEVELOPMENT
  DATABASE_MANAGEMENT
  CYBERSECURITY
  CONSULTATION
}

enum RequestStatus {
  NEW
  CONTACTED
  QUOTED
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
